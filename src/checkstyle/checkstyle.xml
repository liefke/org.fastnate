<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: Fastnate
    Description: 
The checkstyle configuration for fastnate.org
-->
<module name="Checker">
  <property name="severity" value="warning"/>
  <property name="tabWidth" value="4"/>
  <module name="TreeWalker">
    <module name="SuppressWarningsHolder"/>
    <module name="JavadocMethod">
      <property name="accessModifiers" value="public, protected, package"/>
      <property name="allowMissingParamTags" value="true"/>
    </module>
    <module name="JavadocStyle">
      <property name="checkEmptyJavadoc" value="true"/>
      <property name="tokens" value="INTERFACE_DEF,CLASS_DEF,METHOD_DEF,CTOR_DEF"/>
    </module>
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>
    <module name="MethodLength">
      <property name="max" value="100"/>
    </module>
    <module name="ParameterNumber"/>
    <module name="EmptyForIteratorPad"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore">
      <property name="tokens" value="SEMI,POST_DEC,POST_INC"/>
    </module>
    <module name="OperatorWrap"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter">
      <property name="tokens" value="SEMI,TYPECAST"/>
    </module>
    <module name="WhitespaceAround"/>
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock">
      <property name="option" value="text"/>
    </module>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="ignoreAbstractMethods" value="true"/>
    </module>
    <module name="IllegalInstantiation"/>
    <module name="MagicNumber"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="InterfaceIsType"/>
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters"/>
    <module name="UpperEll"/>
    <module name="MissingOverride"/>
    <module name="MissingDeprecated"/>
    <module name="ClassTypeParameterName"/>
    <module name="MethodTypeParameterName"/>
    <module name="TypeName">
      <property name="format" value="^[A-Z][a-z0-9][a-zA-Z0-9]*_?$"/>
    </module>
    <module name="FallThrough">
      <property name="reliefPattern" value="[Ff]allthru|[Ff]alls? ?through.*"/>
    </module>
    <module name="FinalLocalVariable">
      <property name="tokens" value="PARAMETER_DEF,VARIABLE_DEF"/>
    </module>
    <module name="IllegalCatch"/>
    <module name="IllegalThrows"/>
    <module name="ModifiedControlVariable"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="PackageDeclaration"/>
    <module name="OneStatementPerLine"/>
    <module name="CyclomaticComplexity"/>
    <module name="JavadocType">
      <property name="excludeScope" value="private"/>
      <property name="scope" value="package"/>
      <property name="authorFormat" value="[A-Z][a-z]+ [A-Z][a-z]+"/>
    </module>
    <module name="TrailingComment">
      <property name="legalComment" value="^()|(NOSONAR.*)$"/>
    </module>
    <module name="BooleanExpressionComplexity"/>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Specify an encoding, otherwise results can be different on other platforms."/>
      <property name="format" value="\bInputStreamReader\([^,\(]+\)"/>
      <property name="message" value="Usage of platform specific encoding"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="ImportControl">
      <property name="file" value="${config_loc}/importControl.xml"/>
      <message key="import.control.disallowed" value="Disallowed import - {0} (see importControl.xml)"/>
    </module>
    <module name="TodoComment">
      <property name="format" value="TODO(?!\s+\(?(Issue )?#\d+)"/>
      <message key="todo.match" value="Mark TODO with matching issue"/>
    </module>
    <module name="TodoComment">
      <property name="format" value="FIXME"/>
      <message key="todo.match" value="FIXMEs should be solved until completion of the current issue."/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="NamedQuery reference with String"/>
      <property name="format" value="createNamedQuery\s*\(\s*\&quot;"/>
      <property name="message" value="Use constant for NamedQuery"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="NamedQuery declaration with String"/>
      <property name="format" value="\@NamedQuery\s*\(\s*name\s*\=\s*\&quot;"/>
      <property name="message" value="Use constant for NamedQuery"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="NamedQuery usage without type"/>
      <property name="format" value="createNamedQuery\s*\([^,)]*\)"/>
      <property name="message" value="Use a typed NamedQuery"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Unnecessary &quot;null&quot; check when using instanceof"/>
      <property name="format" value="\b(\w+)\s+!=\s+null\b.*\b\1\s+instanceof\b"/>
      <property name="message" value="Unnecessary &quot;null&quot; check when using instanceof"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Unspecific Exception"/>
      <property name="format" value="\bnew\s+RuntimeException\b"/>
      <property name="message" value="Created unspecific Exception"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Do not use public/package protected instance variables"/>
      <property name="format" value="\b(protected|public)\s+(transient\s+)?[\w&lt;&gt;]+\s+\w+\s*(=|;)"/>
      <property name="message" value="Use Getter/Setter methods instead of public/package protected instance variables"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="JavaNCSS">
      <property name="classMaximum" value="500"/>
      <property name="fileMaximum" value="600"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value=".assertThat with equals"/>
      <property name="format" value="assertThat\(.*\.equals\("/>
      <property name="message" value="Invalid usage of assertThat (use isEqualTo instead of equals)"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value=".assertThat without test"/>
      <property name="format" value="assertThat\([^()]*(\([^()]*(\([^()]*\)[^()]*)*\)[^()]*)*\);"/>
      <property name="message" value="Invalid usage of assertThat (specify condition after last bracket)"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Use a Logger instead of (printStackTrace)"/>
      <property name="format" value="\bprintStackTrace\s*\(\)"/>
      <property name="message" value="Invalid usage of printStackTrace()"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Use a Logger instead of (System.out/err)"/>
      <property name="format" value="\bSystem.(out|err)\b"/>
      <property name="message" value="Invalid Usage of System.out or System.err"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Avoid commented-out lines of code"/>
      <property name="format" value="^\s*//.*\);.*$"/>
      <property name="message" value="Avoid commented-out lines of code"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Use log.info(&quot;...{}...&quot;, x)"/>
      <property name="format" value="(?:log\.(debug|info)\(.*)\+"/>
      <property name="message" value="Use log.info(&quot;...'{}'...&quot;, x) instead of log.info(&quot;...&quot; + x + &quot;...&quot;)"/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE OFF: ([\S\|]+)"/>
      <property name="onCommentFormat" value="CHECKSTYLE ON: ([\S\|]+)"/>
      <property name="checkFormat" value="$1"/>
    </module>
  </module>
  <module name="LineLength">
    <property name="max" value="128"/>
  </module>
  <module name="Translation"/>
  <module name="FileLength">
    <property name="max" value="1250"/>
  </module>
  <module name="RegexpSingleline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Line has trailing spaces."/>
    <property name="format" value="^[^\*]*\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>
  <module name="SuppressWarningsFilter"/>
  <module name="SuppressionSingleFilter">
    <property name="files" value="Recht\.java"/>
    <property name="checks" value="FileLength"/>
  </module>
</module>